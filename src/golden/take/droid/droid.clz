class PACKAGEFUNCTIONS$take.java {
  static java.lang.Object eval([java.lang.Object args) {
    return test.golden.PACKAGEFUNCTIONS.take(args[0], args[1])
  }
}
class PACKAGEFUNCTIONS.java {
  static java.lang.Object take(java.lang.Object _0, java.lang.Object _1) {
    {
      _1 = org.flasck.jvm.FLEval.head(_1)
      if (_1 instanceof org.flasck.jvm.FLError) {
        return _1
      }
      if (_1 instanceof org.flasck.jvm.builtin.Cons) {
        {
          _0 = org.flasck.jvm.FLEval.head(_0)
          if (_0 instanceof org.flasck.jvm.FLError) {
            return _0
          }
          if (_0 instanceof org.flasck.jvm.builtin.Number) {
            if (equals(_0,            java.lang.Integer.valueOf(0)
)) {
              return org.flasck.jvm.builtin.Nil.class
            }
          }
          v4 = new org.flasck.jvm.FLClosure(org.flasck.jvm.builtin.PACKAGEFUNCTIONS$-.class,new java.lang.Object[2] {
              autobox[_0]
              autobox[java.lang.Integer.valueOf(1)]
            })
          v5 = new org.flasck.jvm.FLClosure(test.golden.PACKAGEFUNCTIONS$take.class,new java.lang.Object[2] {
              autobox[v4]
              autobox[v1.tail]
            })
          return new org.flasck.jvm.FLClosure(org.flasck.jvm.builtin.Cons.class,new java.lang.Object[2] {
              autobox[v1.head]
              autobox[v5]
            })
        }
      }
      if (_1 instanceof org.flasck.jvm.builtin.Nil) {
        return org.flasck.jvm.builtin.Nil.class
      }
      return new org.flasck.jvm.FLError("take: case not handled")
    }
  }
}
