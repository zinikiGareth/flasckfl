This is a complex card with "one of everything"

	struct ClickIt
	
	struct Thing
		String x
		
	struct Polyed T1 T2
		String x
		T1 y
		List[T2] z
	
.	union PolyThing A B = Thing | Polyed A B
	
	contract Init
		down ready (Any obj)

	contract Handler
		down reply (String s)

	contract DataStore
		up get (String x) (Handler h)

	contract Offer
		up get (String x) (Handler h)

	card SubCard
			
	card Complex
		state
			String hello <- "hello, world"
			Croset[String] list
			String->String mapper
			
		template
			.
				hello
				+ list lv
					.
						lv
				+ list
					.
						"hello"
							click => sayHello
				> SubCard
				
		implements Init
			ready (Thing obj)
				<- ds.get obj.x (FooHandler 'yo')
		
		implements DataStore ds
		
		handler Handler FooHandler k
			reply x
				hello <- k ++ x
		
		event sayHello (ClickIt ev)
			hello <- 'goodbye'

		service Offer
			get x h
				<- h.reply x
