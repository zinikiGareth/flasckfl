class KVUpdate$Down.java implements org.ziniki.ziwsh.DownContract {
  abstract java.lang.Object update(java.lang.Object from, java.lang.Object obj);
}
class KVUpdate$Impl.java extends org.flasck.jvm.cards.ContractImpl implements test.golden.KVUpdate$Down {
  void <init>(org.ziniki.ziwsh.postbox.IDespatcher despatcher) {
    super.<init>(despatcher)
    return
  }
  abstract java.lang.Object update(java.lang.Object from, java.lang.Object obj);
}
class KVUpdate$Up.java implements org.ziniki.ziwsh.UpContract {
}
class PACKAGEFUNCTIONS$f.java {
  void <init>() {
    super.<init>()
    return
  }
  static java.lang.Object eval(java.lang.Object cxt, [java.lang.Object args) {
    return test.golden.PACKAGEFUNCTIONS.f(cxt)
  }
}
class PACKAGEFUNCTIONS.java {
  void <init>() {
    super.<init>()
    return
  }
  static java.lang.Object f(java.lang.Object _context) {
    return org.flasck.jvm.fl.FLClosure.simple(test.golden.f_0$set.class, new java.lang.Object[0] {})
  }
}
class f_0$ItemHandler.java extends test.golden.KVUpdate$Impl {
  Ljava/lang/Object; set
  Ljava/lang/Object; ck

  void <init>(java.lang.Object cxt, java.lang.Object set, java.lang.Object ck) {
    super.<init>()
    this.set = org.flasck.jvm.fl.FLEval.head(cxt, set)
    this.ck = org.flasck.jvm.fl.FLEval.head(cxt, ck)
    return
  }
  static java.lang.Object eval(java.lang.Object cxt, [java.lang.Object args) {
    if (args.length<2) {
      return new org.flasck.jvm.fl.FLCurry(null,test.golden.f_0$ItemHandler.class,args)
    } else {
      return new test.golden.f_0$ItemHandler(cxt,args[0],args[1])
    }
  }
  java.lang.Object update(java.lang.Object _context, java.lang.Object _0) {
    {
      _0 = org.flasck.jvm.fl.FLEval.head(_context, _0)
      if (_0 instanceof org.flasck.jvm.fl.FLError) {
        return _0
      }
      if (_0 instanceof org.flasck.jvm.builtin.Any) {
        {
          v1 = org.flasck.jvm.fl.FLClosure.simple(org.flasck.jvm.builtin.Cons.class, new java.lang.Object[2] {
              autobox[_0]
              autobox[org.flasck.jvm.builtin.Nil.eval(_context, new java.lang.Object[0] {})]
            })
          v2 = org.flasck.jvm.fl.FLClosure.simple(org.flasck.jvm.builtin.Cons.class, new java.lang.Object[2] {
              autobox[this.ck]
              autobox[v1]
            })
          v3 = org.flasck.jvm.fl.FLClosure.simple(org.flasck.jvm.builtin.Send.class, new java.lang.Object[3] {
              autobox[this.set]
              autobox["insert"]
              autobox[v2]
            })
          return org.flasck.jvm.fl.FLClosure.simple(org.flasck.jvm.builtin.Cons.class, new java.lang.Object[2] {
              autobox[v3]
              autobox[org.flasck.jvm.builtin.Nil.eval(_context, new java.lang.Object[0] {})]
            })
        }
      }
      return new org.flasck.jvm.fl.FLError("update: case not handled")
    }
  }
}
class PACKAGEFUNCTIONS$set.java {
  void <init>() {
    super.<init>()
    return
  }
  static java.lang.Object eval(java.lang.Object cxt, [java.lang.Object args) {
    return test.golden.f_0.PACKAGEFUNCTIONS.set(cxt)
  }
}
class PACKAGEFUNCTIONS.java {
  void <init>() {
    super.<init>()
    return
  }
  static java.lang.Object set(java.lang.Object _context) {
    {
      v0 = org.flasck.jvm.fl.FLClosure.simple(Croset$ctor_from.class, new java.lang.Object[0] {})
      return org.flasck.jvm.fl.FLClosure.simple(v0, new java.lang.Object[1] {
          autobox[org.flasck.jvm.builtin.Nil.eval(_context, new java.lang.Object[0] {})]
        })
    }
  }
}
