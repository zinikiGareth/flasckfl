class PACKAGEFUNCTIONS$filter.java {
  static java.lang.Object eval([java.lang.Object args) {
    return test.golden.PACKAGEFUNCTIONS.filter(args[0], args[1])
  }
}
class PACKAGEFUNCTIONS.java {
  static java.lang.Object filter(java.lang.Object _0, java.lang.Object _1) {
    {
      _1 = org.flasck.jvm.FLEval.head(_1)
      if (_1 instanceof org.flasck.jvm.FLError) {
        return _1
      }
      if (_1 instanceof org.flasck.jvm.builtin.Cons) {
        {
          v8 = new org.flasck.jvm.FLClosure(org.flasck.jvm.FLEval$Curry.class,new java.lang.Object[5] {
              autobox[test.golden.filter_1$g.class]
              autobox[java.lang.Integer.valueOf(4)]
              autobox[v5.head]
              autobox[_0]
              autobox[v5.tail]
            })
          v9 = new org.flasck.jvm.FLClosure(_0,new java.lang.Object[1] {
              autobox[v5.head]
            })
          return new org.flasck.jvm.FLClosure(v8,new java.lang.Object[1] {
              autobox[v9]
            })
        }
      }
      if (_1 instanceof org.flasck.jvm.builtin.Nil) {
        return org.flasck.jvm.builtin.Nil.class
      }
      return new org.flasck.jvm.FLError("filter: case not handled")
    }
  }
}
class PACKAGEFUNCTIONS$g.java {
  static java.lang.Object eval([java.lang.Object args) {
    return test.golden.filter_1.PACKAGEFUNCTIONS.g(args[0], args[1], args[2], args[3])
  }
}
class PACKAGEFUNCTIONS.java {
  static java.lang.Object g(java.lang.Object _s0, java.lang.Object _s1, java.lang.Object _s2, java.lang.Object _0) {
    {
      _0 = org.flasck.jvm.FLEval.head(_0)
      if (_0 instanceof org.flasck.jvm.FLError) {
        return _0
      }
      if (_0 instanceof org.flasck.jvm.builtin.Boolean) {
        {
          if (equals(_0,          java.lang.Integer.valueOf(0)
)) {
            return new org.flasck.jvm.FLClosure(test.golden.PACKAGEFUNCTIONS$filter.class,new java.lang.Object[2] {
                autobox[_s1]
                autobox[_s2]
              })
          }
          if (equals(_0,          java.lang.Integer.valueOf(1)
)) {
            {
              v1 = new org.flasck.jvm.FLClosure(test.golden.PACKAGEFUNCTIONS$filter.class,new java.lang.Object[2] {
                  autobox[_s1]
                  autobox[_s2]
                })
              return new org.flasck.jvm.FLClosure(org.flasck.jvm.builtin.Cons.class,new java.lang.Object[2] {
                  autobox[_s0]
                  autobox[v1]
                })
            }
          }
        }
      }
      return new org.flasck.jvm.FLError("g: case not handled")
    }
  }
}
