package test.golden
  cdecl test.golden.SetState @{1:0|contract} @{1:9|SetState}
    required down setOn @{2:0|down} @{2:5|setOn}
    required down setOff @{3:0|down} @{3:5|setOff}
  cdecl test.golden.Echo @{5:0|contract} @{5:9|Echo}
    required down saySomething @{6:0|down} @{6:5|saySomething}
      [type] msg @{6:26|msg}
        String @{6:19|String}
    required up echoIt @{7:0|up} @{7:5|echoIt}
      [type] msg @{7:20|msg}
        String @{7:13|String}
  card test.golden.ControlledCard @{9:0|card} @{9:5|ControlledCard}
    state @{10:0|state}
      sayHello @{11:8|sayHello}
        Boolean @{11:0|Boolean}
    template @{13:0|template} @{null}
      '' hello @{14:0|'hello'}
        <apply> @{14:11|styleIf 'show' sayHello}
          styleIf @{14:11|styleIf}
          '' show @{14:19|'show'}
          sayHello @{14:26|sayHello}
    implements SetState @{16:0|implements} @{16:11|SetState}
      method test.golden.ControlledCard._C0.setOn @{17:0|setOn}
        assign sayHello <- @{18:0|sayHello} @{18:9|<-}
          true @{18:12|true}
      method test.golden.ControlledCard._C0.setOff @{19:0|setOff}
        assign sayHello <- @{20:0|sayHello} @{20:9|<-}
          false @{20:12|false}
    implements Echo e @{22:0|implements} @{22:11|Echo} @{22:16|e}
      method test.golden.ControlledCard._C1.saySomething @{23:0|saySomething}
        [var] msg @{23:13|msg}
        invoke @{24:0|<-}
          <apply> @{24:3|e.echoIt msg}
            <apply> @{24:3|e.echoIt}
              . @{24:4|.}
              e @{24:3|e}
              echoIt @{24:5|echoIt}
            msg @{24:12|msg}
    test.golden.ControlledCard.styleIf @{26:0|styleIf}
      [var] style @{26:8|style}
      [var] b @{26:14|b}
     =
      if b
        style @{27:9|style}
      else
        ''  @{28:7|''}
