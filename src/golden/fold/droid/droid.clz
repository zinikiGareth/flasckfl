class PACKAGEFUNCTIONS$fold.java {
  static java.lang.Object eval([java.lang.Object args) {
    return test.golden.PACKAGEFUNCTIONS.fold(args[0], args[1], args[2])
  }
}
class PACKAGEFUNCTIONS.java {
  static java.lang.Object fold(java.lang.Object _0, java.lang.Object _1, java.lang.Object _2) {
    {
      _2 = org.flasck.jvm.fl.FLEval.head(_2)
      if (_2 instanceof org.flasck.jvm.fl.FLError) {
        return _2
      }
      if (_2 instanceof org.flasck.jvm.builtin.Cons) {
        {
          v5 = new org.flasck.jvm.fl.FLClosure(_0,new java.lang.Object[2] {
              autobox[_1]
              autobox[v2.head]
            })
          return new org.flasck.jvm.fl.FLClosure(test.golden.PACKAGEFUNCTIONS$fold.class,new java.lang.Object[3] {
              autobox[_0]
              autobox[v5]
              autobox[v2.tail]
            })
        }
      }
      if (_2 instanceof org.flasck.jvm.builtin.Nil) {
        return _1
      }
      return new org.flasck.jvm.fl.FLError("fold: case not handled")
    }
  }
}
