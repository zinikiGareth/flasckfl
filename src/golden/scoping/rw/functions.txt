function test.golden.cna 1
  case test.golden.cna_0
    typed contract test.golden.NoArg test.golden.cna_0.na
  =
    @
      PackageVar.Cons
      <-
        LocalVar.test.golden.cna_0.na
        "get"
        42
      =>
        null
      PackageVar.Nil
function test.golden.f 2
  nested test.golden.f_0.q test.golden.f
  nested test.golden.f_0.var test.golden.f
  case test.golden.f_0
    typed contract test.golden.Server test.golden.f_0.server
    var test.golden.f_0.x
  =
    @
      PackageVar.MessageWrapper
      ScopedVar.Scoped[test.golden.f_0.var]
      @
        PackageVar.Cons
        ScopedVar.Scoped[test.golden.f_0.q]
        PackageVar.Nil
function test.golden.f_0.HandleReply.reply 2
  case test.golden.f_0.HandleReply.reply_0
    typed Number test.golden.f_0.HandleReply.reply.y
    typed Any test.golden.f_0.HandleReply._ih
  =
    @
      PackageVar.Cons
      <-
        HandlerLambda.HL[test.golden.f_0.HandleReply.server]
        "put"
        @
          PackageVar.+
          HandlerLambda.HL[test.golden.f_0.HandleReply.var]
          HandlerLambda.HL[test.golden.f_0.HandleReply.v]
      =>
        null
      PackageVar.Nil
function test.golden.f_0.q 0
  nested test.golden.f_0.HandleReply test.golden.f
  nested test.golden.f_0.server test.golden.f
  nested test.golden.f_0.var test.golden.f
  case test.golden.f_0.q_0
  =
    @
      PackageVar.Cons
      <-
        ScopedVar.Scoped[test.golden.f_0.server]
        "get"
        ScopedVar.Scoped[test.golden.f_0.var]
      =>
        @
          ScopedVar.Scoped[test.golden.f_0.HandleReply]
          ScopedVar.Scoped[test.golden.f_0.var]
      PackageVar.Nil
function test.golden.f_0.var 0
  case test.golden.f_0.var_0
  =
    32
