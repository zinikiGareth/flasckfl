handler test.golden.f_0.HandleReply *function*
  lambda test.golden.f_0.HandleReply server
  lambda test.golden.f_0.HandleReply var
  lambda test.golden.f_0.HandleReply v
  method test.golden.f_0.HandleReply.reply
    case test.golden.f_0.HandleReply.reply
      var test.golden.f_0.HandleReply.reply.y
    =
      <-
        @
          @
            PackageVar.FLEval.field
            HandlerLambda.HL[test.golden.f_0.HandleReply.server]
            "put"
          @
            PackageVar.+
            HandlerLambda.HL[test.golden.f_0.HandleReply.var]
            HandlerLambda.HL[test.golden.f_0.HandleReply.v]
method test.golden.cna
  case test.golden.cna
    typed contract test.golden.NoArg test.golden.cna_0.na
  =
    <-
      @
        @
          PackageVar.FLEval.field
          LocalVar.test.golden.cna_0.na
          "get"
        42
method test.golden.f_0.q
  nested test.golden.f_0.HandleReply test.golden.f
  nested test.golden.f_0.server test.golden.f
  nested test.golden.f_0.var test.golden.f
  case test.golden.f_0.q
  =
    <-
      @
        @
          PackageVar.FLEval.field
          ScopedVar.Scoped[test.golden.f_0.server]
          "get"
        ScopedVar.Scoped[test.golden.f_0.var]
        @
          ScopedVar.Scoped[test.golden.f_0.HandleReply]
          ScopedVar.Scoped[test.golden.f_0.var]
function test.golden.f 2
  nested test.golden.f_0.q test.golden.f
  nested test.golden.f_0.var test.golden.f
  case test.golden.f_0
    typed contract test.golden.Server test.golden.f_0.server
    var test.golden.f_0.x
  =
    @
      PackageVar.MessageWrapper
      ScopedVar.Scoped[test.golden.f_0.var]
      @
        PackageVar.Cons
        ScopedVar.Scoped[test.golden.f_0.q]
        PackageVar.Nil
function test.golden.f_0.var 0
  case test.golden.f_0.var_0
  =
    32
