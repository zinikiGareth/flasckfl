	test that we can have a simple constructor match
		assert (a Nil)
			0

// while interesting, this is actually a type error			
.	test anything else is an error because of typing
.		assert (a 3)
.			Error "no matching case"

	test that we can match Cons as a type
		assert (a2 (Cons "hello" Nil))
			1
			
	test that we can match Cons as a constructor
		assert (a3 (Cons "hello" Nil))
			6
			
	test that we can match True if present
		assert (b True)
			0
			
	test that we can match False if present
		assert (b False)
			1
			
	test that we can match two arguments correctly
		assert (c True Nil)
			0
			
	test that we can go the other way
		assert (c False Nil)
			1
	
	test that when head is matched it picks the specific case
		assert (d3 [True])
			2

	test that when head is not matched the default case applies
		assert (d3 [False])
			1
			 
	test the simple case of e
		assert (e True [])
			0
	
	test False and Nil will be 3
		assert (e False [])
			3
	
	test any False case will always be 3
		assert (e False [True, True])
			3

	test we can switch on a constant
		assert (f 3)
			0

	test any other constant is an error
		assert (f 5)
			Error "no matching case"

	test we can switch on a string
		assert (g "hello")
			1

	test any other string is an error
		assert (g "goodbye")
			Error "no matching case"

	test if a variable is ignored, it's value is irrelevant
		assert (k 22)
			0

	test if a variable is ignored, it's value is irrelevant part 2
		assert (k 15)
			0
			
	test that we can pass any number to a function expecting numbers
		assert (l 17)
			0
			
.	test anything else is an error because of typing
.		assert (l Nil)
.			Error
			