class Hc.java extends org.flasck.jvm.ContractImpl {
  void <init>() {
    super.<init>()
    return
  }
  abstract java.lang.Object reply();
}
class PACKAGEFUNCTIONS$scoped.java {
  java.lang.Object eval([java.lang.Object args) {
    return test.golden.PACKAGEFUNCTIONS.scoped(args[0])
  }
}
class PACKAGEFUNCTIONS.java {
  java.lang.Object scoped(java.lang.Object _0) {
    {
      _0 = org.flasck.jvm.FLEval.head(_0)
      if (_0 instanceof org.flasck.jvm.FLError) {
        return _0
      }
      if (_0 instanceof test.golden.UpC) {
        {
          v5 = new org.flasck.jvm.FLClosure(test.golden.scoped_0$MyHc.class,new java.lang.Object[1] {
              autobox["test.golden.scoped_0.requestObj"]
            })
          v6 = new org.flasck.jvm.FLClosure(test.golden.scoped_0$request.class,new java.lang.Object[2] {
              autobox[v5]
              autobox[_0]
            })
          v7 = new org.flasck.jvm.FLClosure(org.flasck.jvm.builtin.Cons.class,new java.lang.Object[2] {
              autobox[v6]
              autobox[org.flasck.jvm.builtin.Nil.eval(new java.lang.Object[0] {})]
            })
          return new org.flasck.jvm.FLClosure(org.flasck.jvm.builtin.MessageWrapper.class,new java.lang.Object[2] {
              autobox[java.lang.Integer.valueOf(32)]
              autobox[v7]
            })
        }
      }
      return new org.flasck.jvm.FLError("scoped: case not handled")
    }
  }
}
class UpC.java extends org.flasck.jvm.ContractImpl {
  void <init>() {
    super.<init>()
    return
  }
}
