class PACKAGEFUNCTIONS$filter.java {
  void <init>() {
    super.<init>()
    return
  }
  static java.lang.Object eval(java.lang.Object cxt, [java.lang.Object args) {
    return test.golden.PACKAGEFUNCTIONS.filter(cxt, args[0], args[1])
  }
}
class PACKAGEFUNCTIONS.java {
  void <init>() {
    super.<init>()
    return
  }
  static java.lang.Object filter(java.lang.Object _context, java.lang.Object _0, java.lang.Object _1) {
    {
      _1 = org.flasck.jvm.fl.FLEval.head(_1)
      if (_1 instanceof org.flasck.jvm.fl.FLError) {
        return _1
      }
      if (_1 instanceof org.flasck.jvm.builtin.Cons) {
        {
          v4 = new org.flasck.jvm.fl.FLClosure(_0,new java.lang.Object[1] {
              autobox[v1.head]
            })
          if (org.flasck.jvm.fl.FLEval.isTruthy(v4)) {
            {
              v5 = new org.flasck.jvm.fl.FLClosure(test.golden.PACKAGEFUNCTIONS$filter.class,new java.lang.Object[2] {
                  autobox[_0]
                  autobox[v1.tail]
                })
              return new org.flasck.jvm.fl.FLClosure(org.flasck.jvm.builtin.Cons.class,new java.lang.Object[2] {
                  autobox[v1.head]
                  autobox[v5]
                })
            }
          }
          return new org.flasck.jvm.fl.FLClosure(test.golden.PACKAGEFUNCTIONS$filter.class,new java.lang.Object[2] {
              autobox[_0]
              autobox[v1.tail]
            })
        }
      }
      if (_1 instanceof org.flasck.jvm.builtin.Nil) {
        return org.flasck.jvm.builtin.Nil.eval(_context, new java.lang.Object[0] {})
      }
      return new org.flasck.jvm.fl.FLError("filter: case not handled")
    }
  }
}
