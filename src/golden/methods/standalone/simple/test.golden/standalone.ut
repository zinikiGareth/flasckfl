	test we can generate a Debug command
		assert (adebug)
			[Debug "hello"]

	test we can generate a Debug command through a function
		assert (fdebug)
			[Debug "hello"]

	test we can generate a Debug command passing in an argument
		assert (ndebug "we are here")
			[Debug "we are here"]

	test we can generate a Debug command passing in an argument through a nested function
		assert (f "this is data")
			[Debug "this is data"]

	test we can generate a Debug command using pattern matching
		assert (k True ["hello"])
			[Debug "hello"]

// this fails on typechecking now
.	test we fail to match False
.		assert (k False ["hello"])
.			Error "no matching case"

	test we can create a Send on a contract
		data Sample svc
		assert (q svc)
			[Send svc "meth" ["hello"]] 

	test we can send directly on a contract
		data Sample svc
		assert (r svc)
			[Send svc "meth" ["hello"]] 

	test we can send to a card
		data SampleDown svc
		assert (s svc "yo")
			[Send svc "card" ["yo"]] 

	test we can do two things in one method
		data Sample svc
		assert (double svc)
			[Debug "sending hello", Send svc "meth" ["hello"], Assign "on" "fld" "value"] 
			