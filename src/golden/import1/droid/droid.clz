class Foo$_C0.java extends test.import.Fred {
  void <init>(test.golden.Foo card) {
    super.<init>()
    this._card = card
    return
  }
  java.lang.Object go(java.lang.Object _0) {
    {
      _0 = org.flasck.jvm.FLEval.head(_0)
      if (_0 instanceof org.flasck.jvm.FLError) {
        return _0
      }
      if (_0 instanceof org.flasck.jvm.builtin.Number) {
        {
          v1 = new org.flasck.jvm.FLClosure(test.import.PACKAGEFUNCTIONS$f.class,new java.lang.Object[1] {
autobox[_0]
})
          v2 = new org.flasck.jvm.FLClosure(org.flasck.jvm.builtin.Assign.class,new java.lang.Object[3] {
autobox[this._card]
autobox["a"]
autobox[v1]
})
          return new org.flasck.jvm.FLClosure(org.flasck.jvm.builtin.Cons.class,new java.lang.Object[2] {
  autobox[v2]
  autobox[  org.flasck.jvm.builtin.Nil.eval(new java.lang.Object[0] {
})
]
})
        }
      }
      return new org.flasck.jvm.FLError("go: case not handled")
    }
  }
}
class Foo.java extends org.flasck.jvm.cards.FlasckCard {
  void <init>(org.flasck.jvm.cards.CardDespatcher despatcher, org.flasck.jvm.display.DisplayEngine display) {
    super.<init>(despatcher, display)
    this.registerContract("test.import.Fred", new test.golden.Foo$_C0(this))
    super.ready()
    return
  }
}
